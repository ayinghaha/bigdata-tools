<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.iflytek.voicecloud.itm.dao.GroupDao">

    <resultMap id="GroupResult" type="Group">
        <id property="id" column="id" />
        <result property="name" column="name" />
        <result property="company" column="company"/>
        <result property="remark" column="remark"/>
        <result property="itmID" column="itm_id"/>
        <result property="token" column="token"/>
        <result property="registTime" column="regist_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <resultMap id="UserResult" type="User">
        <id property="id" column="id" />
        <result property="userName" column="user_name"/>
        <result property="password" column="password"/>
        <result property="salt" column="salt"/>
        <result property="nickName" column="nick_name"/>
        <result property="remark" column="remark"/>
        <result property="lastLogin" column="last_login"/>
        <result property="registTime" column="regist_time"/>
        <result property="updateTime" column="update_time"/>
    </resultMap>

    <insert id="addGroup" parameterType="Group" keyProperty="id" useGeneratedKeys="true">
        insert into t_group values(null, #{name}, #{company}, #{remark}, #{itmID}, #{token}, #{registTime}, #{updateTime})
    </insert>

    <select id="getGroup" parameterType="Map" resultMap="GroupResult">
        select * from t_group g
        <if test="userId != null">
            join t_user_group_link ugl on g.id = ugl.group_id
            join t_user u on ugl.user_id = u.id
        </if>
        <where>
            <if test="userId != null">
                u.id = #{userId}
            </if>
            <if test="id != null">
                g.id = #{id}
            </if>
            <if test="name != null and name != '' ">
                and g.name like CONCAT('%',#{name},'%')
            </if>
        </where>
        order by g.regist_time desc
        <if test="page != null">
            limit #{page}, #{perPage}
        </if>
    </select>

    <select id="getGroupById" parameterType="Integer" resultMap="GroupResult">
        select * from t_group where id = #{groupId}
    </select>

    <update id="updateGroup" parameterType="Group">
        update t_group set name=#{name}, company=#{company}, remark=#{remark} where id=#{id}
    </update>

    <select id="getUserListByGroup" parameterType="Integer" resultMap="UserResult">
        select t_user.id, t_user.user_name, t_user_group_link.remark
            from t_user join t_user_group_link
            on t_user.id = t_user_group_link.user_id
            where group_id = #{id}
    </select>

    <select id="getGroupCount" parameterType="Map" resultType="Integer">
        select count(*) from t_group g
        <if test="userId != null">
            join t_user_group_link ugl on g.id = ugl.group_id
            join t_user u on ugl.user_id = u.id
        </if>
        <where>
            <if test="userId != null">
                u.id = #{userId}
            </if>
            <if test="id != null">
                g.id = #{id}
            </if>
            <if test="name != null and name != '' ">
                and g.name like CONCAT('%',#{name},'%')
            </if>
        </where>
    </select>

    <delete id="deleteGroupById" parameterType="Integer">
        delete from t_group where id=#{id}
    </delete>

    <select id="getContainerConditionGroup" parameterType="Map" resultMap="GroupResult">
        SELECT #{select} FROM t_group c
            JOIN t_group g ON c.itm_id = g.itm_id
            JOIN t_user_group_link ugl ON g.id = ugl.group_id
            JOIN t_user u ON ugl.user_id = u.id
        <where>
            <if test="userId != null">
                u.id = #{userId}
            </if>
            <if test="keyWords != null and name != '' ">
                g.name like CONCAT('%',#{keyWords},'%')
            </if>
        </where>
        order by g.regist_time desc
        <if test="page != null">
            limit #{page}, #{perPage}
        </if>
    </select>

</mapper>